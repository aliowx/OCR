stages:
  - test
  - build
  - deploy

workflow:
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'test'"

test-project-test:
  stage: test
  before_script:
    - "docker login --username $PARKING_REGISTERY_USER --password $PARKING_REGISTERY_PASSWORD $PARKING_REGISTERY_URL"
  script:
    - "echo test"

build-project-image-test:
  stage: build
  before_script:
    - "cd parking"
    - "touch .env"
    - "docker login --username $PARKING_REGISTERY_USER --password $PARKING_REGISTERY_PASSWORD $PARKING_REGISTERY_URL"
  script:
    - "export TAG=latest-cicd"
    - "echo build image with TAG latest-cicd"
    - "echo deploy to registery"
    - "sh publishProject.sh"
  after_script:
    - "echo build is done"

deploy-project-test-server:
  stage: deploy
  script:
    - "echo deploy to test server"
    - scp -o StrictHostKeyChecking=no $ENV_PROJECT_FILE_PARKING $PARKING_TEST_USER@$PARKING_TEST_SERVER_IP:/home/ubuntu/projects/parking-backend/.env
    - ssh -o StrictHostKeyChecking=no $PARKING_TEST_SERVER_USER@$PARKING_TEST_SERVER_IP "cd /home/ubuntu/projects/parking-backend && sudo TAG=latest-cicd docker compose pull && sudo TAG=latest-cicd docker compose down && sudo TAG=latest-cicd docker compose up -d && exit"
  tags:
    - shell_executer
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'test'"

