"""excents zone and delete rule and relation zone by price

Revision ID: cdfbb25f11b2
Revises: e0c6187e8ed7
Create Date: 2024-09-05 13:44:51.733010

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cdfbb25f11b2'
down_revision = 'e0c6187e8ed7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_rule_created', table_name='rule')
    op.drop_index('ix_rule_id', table_name='rule')
    op.drop_index('ix_rule_is_deleted', table_name='rule')
    op.drop_index('ix_rule_modified', table_name='rule')
    op.drop_constraint('platerule_rule_id_fkey', 'platerule', type_='foreignkey')
    op.drop_constraint('zonerule_rule_id_fkey', 'zonerule', type_='foreignkey')
    op.drop_table('rule')
    op.drop_index('ix_zoneprice_created', table_name='zoneprice')
    op.drop_index('ix_zoneprice_id', table_name='zoneprice')
    op.drop_index('ix_zoneprice_is_deleted', table_name='zoneprice')
    op.drop_index('ix_zoneprice_modified', table_name='zoneprice')
    op.drop_table('zoneprice')
    op.drop_index('ix_zonerule_created', table_name='zonerule')
    op.drop_index('ix_zonerule_id', table_name='zonerule')
    op.drop_index('ix_zonerule_is_deleted', table_name='zonerule')
    op.drop_index('ix_zonerule_modified', table_name='zonerule')
    op.drop_table('zonerule')
    op.drop_index('ix_platerule_created', table_name='platerule')
    op.drop_index('ix_platerule_id', table_name='platerule')
    op.drop_index('ix_platerule_is_deleted', table_name='platerule')
    op.drop_index('ix_platerule_modified', table_name='platerule')
    op.drop_table('platerule')
    op.add_column('zone', sa.Column('price_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_zone_price_id'), 'zone', ['price_id'], unique=False)
    op.drop_constraint('zone_parent_id_fkey', 'zone', type_='foreignkey')
    op.create_foreign_key(None, 'zone', 'price', ['price_id'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'zone', type_='foreignkey')
    op.create_foreign_key('zone_parent_id_fkey', 'zone', 'zone', ['parent_id'], ['id'], initially='DEFERRED', deferrable=True)
    op.drop_index(op.f('ix_zone_price_id'), table_name='zone')
    op.drop_column('zone', 'price_id')
    op.create_table('platerule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plate', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rule_id'], ['rule.id'], name='platerule_rule_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='platerule_pkey')
    )
    op.create_index('ix_platerule_modified', 'platerule', ['modified'], unique=False)
    op.create_index('ix_platerule_is_deleted', 'platerule', ['is_deleted'], unique=False)
    op.create_index('ix_platerule_id', 'platerule', ['id'], unique=False)
    op.create_index('ix_platerule_created', 'platerule', ['created'], unique=False)
    op.create_table('zonerule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rule_id'], ['rule.id'], name='zonerule_rule_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['zone_id'], ['zone.id'], name='zonerule_zone_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='zonerule_pkey')
    )
    op.create_index('ix_zonerule_modified', 'zonerule', ['modified'], unique=False)
    op.create_index('ix_zonerule_is_deleted', 'zonerule', ['is_deleted'], unique=False)
    op.create_index('ix_zonerule_id', 'zonerule', ['id'], unique=False)
    op.create_index('ix_zonerule_created', 'zonerule', ['created'], unique=False)
    op.create_table('zoneprice',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['price_id'], ['price.id'], name='zoneprice_price_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['zone_id'], ['zone.id'], name='zoneprice_zone_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='zoneprice_pkey')
    )
    op.create_index('ix_zoneprice_modified', 'zoneprice', ['modified'], unique=False)
    op.create_index('ix_zoneprice_is_deleted', 'zoneprice', ['is_deleted'], unique=False)
    op.create_index('ix_zoneprice_id', 'zoneprice', ['id'], unique=False)
    op.create_index('ix_zoneprice_created', 'zoneprice', ['created'], unique=False)
    op.create_table('rule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name_fa', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rule_type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weekdays', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=False),
    sa.Column('start_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('registeration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='rule_pkey')
    )
    op.create_index('ix_rule_modified', 'rule', ['modified'], unique=False)
    op.create_index('ix_rule_is_deleted', 'rule', ['is_deleted'], unique=False)
    op.create_index('ix_rule_id', 'rule', ['id'], unique=False)
    op.create_index('ix_rule_created', 'rule', ['created'], unique=False)
    # ### end Alembic commands ###
